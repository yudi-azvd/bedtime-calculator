{"mappings":"MAUqBA,gBCqBZC,MACL,MAAMC,EAAY,IAAIC,KAAI,GAAIC,KAAKC,gBAAgBD,KAAKE,aAExDJ,EAAUK,WACRH,KAAKI,UACHN,EAAUO,aACVL,KAAKM,iCAIT,MAEMC,EAF6BT,EAGhCU,mBAAmB,SACnBC,QAAO,SAAW,IAGrB,OADAT,KAAKE,UAAYK,EACVA,gBAlCIP,KAEHM,+BAAiC,GAF9BN,KAGHC,aAAe,4BDLtBS,SAACA,EAAQJ,+BAAEA,EAAiC,KAE7CK,QACAX,KAAKE,UAAYQ,EACjBV,KAAKM,+BAAiCA,EAG9BF,UAAUQ,EAAYC,GAC9B,OAAOD,EAAQC,eEjBjB,MAAMC,EAAiBC,SAASC,cAAc,qBACxCC,EAAWF,SAASC,cAAc,kBACxCF,EAAeI,eAuBSC,GACxB,IAAIC,EAAQ,IAAIC,OAAOF,EAAKG,YAC5BF,EAAQA,EAAMG,SAAS,EAAG,KAC1B,IAAIC,EAAU,IAAIH,OAAOF,EAAKd,cAE9B,OADAmB,EAAUA,EAAQD,SAAS,EAAG,KACxB,GAAIH,KAASI,IA5BIC,CAAiB,IAAI1B,MAkB5Ce,EAAeY,iBAAiB,mBAhBLC,GACzB,MAAMzB,EAAS,GAAyByB,EAAMC,OAAQV,QAGtD,IAAIW,EAFJZ,EAASa,UAAY,GAGrB,IAAIC,EAAU7B,EACV8B,EAAO,IAAIpC,EAAmC,CAAEc,SAAUqB,IAC9D,IAAK,IAAIE,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtCJ,EAAqBG,EAAKnC,MAC1BkC,EAAUF,EACV,MAAMK,EAAKnB,SAASoB,cAAc,MAClCD,EAAGJ,UAAYD,EACfZ,EAASmB,YAAYF,OAO3BG","sources":["src/services/CalculateOneSleepCycleLaterService.ts","src/services/CalculateOneSleepCycleService.ts","src/main.ts"],"sourcesContent":["import CalculateOneSleepCycleService from './CalculateOneSleepCycleService'\nimport { Args } from './CalculateOneSleepCycleService'\n\n/**\n * Calcula horários a partir de `baseTime` em intervalos de\n * tempo de `sleepCycleDurationInMinutes`.\n *\n * @param {string} baseTime horário base no formato HH:mm\n * @param {number} sleepCycleDurationInMinutes duração de um ciclo de sono em minutos\n */\nexport default class CalculateOneSleepCycleLaterService extends CalculateOneSleepCycleService {\n  constructor(\n    { baseTime, oneSleepCycleDurationInMinutes = 90 }: Args\n  ) {\n    super()\n    this.startTime = baseTime\n    this.oneSleepCycleDurationInMinutes = oneSleepCycleDurationInMinutes\n  }\n\n  protected operation(mili1: any, mili2: any): number {\n    return mili1 + mili2\n  }\n}\n","export interface Args {\n  baseTime: string\n  oneSleepCycleDurationInMinutes?: number\n}\n\n/**\n * Classe base que calcula horários baseados em `baseTime` em intervalos de\n * tempo de `sleepCycleDurationInMinutes`. As classes que herdam dela devem\n * implementar o método `operation`. A implementação de `operation` determina\n * se a classe filha calcula um novo horário antes ou depois de `baseTime`.\n *\n * @param {string} baseTime horário base no formato HH:mm\n * @param {number} sleepCycleDurationInMinutes duração de um ciclo de sono em minutos\n */\nexport default abstract class CalculateOneSleepCycleService {\n  protected startTime: string\n  protected oneSleepCycleDurationInMinutes = 90\n  protected DEFAULT_DATE = '2000-01-01'\n\n  /**\n   * Esse método deve ser sobrescrito pela classe filha.\n   *\n   * Se é implementado com `n1`+`n1` a classe filha calcula horários posteriores.\n   *\n   * Se é implementado com `n1`-`n1` a classe filha calcula horários prévios.\n   *\n   * @param n1 duração em minutos 1\n   * @param n2 duração em minutos 2\n   */\n  protected abstract operation(n1: number, n2: number): number\n\n  public run() {\n    const startDate = new Date(`${this.DEFAULT_DATE} ${this.startTime}`)\n\n    startDate.setMinutes(\n      this.operation(\n        startDate.getMinutes(),\n        this.oneSleepCycleDurationInMinutes\n      )\n    )\n\n    const oneSleepCycleLaterOfBefore = startDate\n    // hh:mm:ss => hh:mm\n    const formattedTime = oneSleepCycleLaterOfBefore\n      .toLocaleTimeString('pt-BR')\n      .replace(/:\\d\\d$/, '')\n\n    this.startTime = formattedTime\n    return formattedTime\n  }\n}\n","import CalculateOneSleepCycleLaterService from './services/CalculateOneSleepCycleLaterService'\n\nfunction main() {\n  const startTimeInput = document.querySelector('#start-time-sleep') as HTMLInputElement\n  const timesDiv = document.querySelector('#times-wake-up') as HTMLDivElement\n  startTimeInput.value = dateToTimeString(new Date())\n\n  function onStartTimeChange(event: Event) {\n    const startTime = `${(<HTMLInputElement>event.target).value}`\n    timesDiv.innerText = ''\n\n    let oneSleepCycleLater: string\n    let newTime = startTime\n    let calc = new CalculateOneSleepCycleLaterService({ baseTime: newTime })\n    for (let index = 0; index < 5; index++) {\n      oneSleepCycleLater = calc.run()\n      newTime = oneSleepCycleLater\n      const li = document.createElement('li')\n      li.innerText = oneSleepCycleLater\n      timesDiv.appendChild(li)\n    }\n  }\n\n  startTimeInput.addEventListener('change', onStartTimeChange)\n}\n\nmain()\n\nfunction dateToTimeString(date: Date): string {\n  let hours = new String(date.getHours())\n  hours = hours.padStart(2, '0')\n  let minutes = new String(date.getMinutes())\n  minutes = minutes.padStart(2, '0')\n  return `${hours}:${minutes}`\n}\n\n"],"names":["$3dd853ceb74a3d5e$export$2e2bcd8739ae039","run","startDate","Date","this","DEFAULT_DATE","startTime","setMinutes","operation","getMinutes","oneSleepCycleDurationInMinutes","formattedTime","toLocaleTimeString","replace","baseTime","super","mili1","mili2","startTimeInput","document","querySelector","timesDiv","value","date","hours","String","getHours","padStart","minutes","$5ba171b4a505aeb2$var$dateToTimeString","addEventListener","event","target","oneSleepCycleLater","innerText","newTime","calc","index","li","createElement","appendChild","$5ba171b4a505aeb2$var$main"],"version":3,"file":"index.6f1a3a5e.js.map"}