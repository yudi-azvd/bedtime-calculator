{"mappings":"MAUqBA,gBCYZC,MACL,MAAMC,EAAY,IAAIC,KAAI,GAAIC,KAAKC,gBAAgBD,KAAKE,aAElDC,EAAuBH,KAAKI,UAChCN,EAAUO,UACVL,KAAKM,+BACHN,KAAKO,yBAKHC,EAFqB,IAAIT,KAAKI,GAEKM,mBAAmB,SAASC,QAAO,SAAW,IAGvF,OADAV,KAAKE,UAAYM,EACVA,gBAtBIR,KAEHM,+BAAiC,GAF9BN,KAGHO,wBAA0B,IAHvBP,KAIHC,aAAe,4BDNtBU,SAACA,EAAQL,+BAAEA,EAAiC,KAE7CM,QACAZ,KAAKE,UAAYS,EACjBX,KAAKM,+BAAiCA,EAG9BF,UAAUS,EAAYC,GAC9B,OAAOD,EAAQC,eEjBjB,MAAMC,EAAiBC,SAASC,cAAc,qBACxCC,EAAWF,SAASC,cAAc,kBACxCF,EAAeI,eAuBSC,GACxB,IAAIC,EAAQ,IAAIC,OAAOF,EAAKG,YAC5BF,EAAQA,EAAMG,SAAS,EAAG,KAC1B,IAAIC,EAAU,IAAIH,OAAOF,EAAKM,cAE9B,OADAD,EAAUA,EAAQD,SAAS,EAAG,KACxB,GAAIH,KAASI,IA5BIE,CAAiB,IAAI5B,MAkB5CgB,EAAea,iBAAiB,mBAhBLC,GACzB,MAAM3B,EAAS,GAAyB2B,EAAMC,OAAQX,QAGtD,IAAIY,EAFJb,EAASc,UAAY,GAGrB,IAAIC,EAAU/B,EACVgC,EAAO,IAAItC,EAAmC,CAAEe,SAAUsB,IAC9D,IAAK,IAAIE,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtCJ,EAAqBG,EAAKrC,MAC1BoC,EAAUF,EACV,MAAMK,EAAKpB,SAASqB,cAAc,MAClCD,EAAGJ,UAAYD,EACfb,EAASoB,YAAYF,OAO3BG","sources":["src/services/CalculateOneSleepCycleLaterService.ts","src/services/CalculateOneSleepCycleService.ts","src/main.ts"],"sourcesContent":["import CalculateOneSleepCycleService from './CalculateOneSleepCycleService'\nimport { Args } from './CalculateOneSleepCycleService'\n\n/**\n * Calcula horários a partir de `baseTime` em intervalos de\n * tempo de `sleepCycleDurationInMinutes`.\n *\n * @param {string} baseTime horário base no formato HH:mm\n * @param {number} sleepCycleDurationInMinutes duração de um ciclo de sono em minutos\n */\nexport default class CalculateOneSleepCycleLaterService extends CalculateOneSleepCycleService {\n  constructor(\n    { baseTime, oneSleepCycleDurationInMinutes = 90 }: Args\n  ) {\n    super()\n    this.startTime = baseTime\n    this.oneSleepCycleDurationInMinutes = oneSleepCycleDurationInMinutes\n  }\n\n  protected operation(mili1: any, mili2: any): number {\n    return mili1 + mili2\n  }\n}\n","export interface Args {\n  baseTime: string\n  oneSleepCycleDurationInMinutes?: number\n}\n\n/**\n * Classe base que calcula horários baseados em `baseTime` em intervalos de\n * tempo de `sleepCycleDurationInMinutes`. As classes que herdam dela devem\n * implementar o método `operation`. A implementação de `operation` determina\n * se a classe filha calcula um novo horário antes ou depois de `baseTime`.\n *\n * @param {string} baseTime horário base no formato HH:mm\n * @param {number} sleepCycleDurationInMinutes duração de um ciclo de sono em minutos\n */\nexport default abstract class CalculateOneSleepCycleService {\n  protected startTime: string\n  protected oneSleepCycleDurationInMinutes = 90\n  protected MILLISECONDS_TO_MINUTES = 60 * 1000\n  protected DEFAULT_DATE = '2000-01-01'\n\n  protected abstract operation(mili1: number, mili2: number): number\n\n  public run() {\n    const startDate = new Date(`${this.DEFAULT_DATE} ${this.startTime}`)\n\n    const startTimeInMillisecs = this.operation(\n      startDate.getTime(),\n      this.oneSleepCycleDurationInMinutes\n      * this.MILLISECONDS_TO_MINUTES\n    )\n\n    const oneSleepCycleLater = new Date(startTimeInMillisecs)\n    // hh:mm:ss => hh:mm\n    const formattedTime = oneSleepCycleLater.toLocaleTimeString('pt-BR').replace(/:\\d\\d$/, '')\n\n    this.startTime = formattedTime\n    return formattedTime\n  }\n}\n","import CalculateOneSleepCycleLaterService from './services/CalculateOneSleepCycleLaterService'\n\nfunction main() {\n  const startTimeInput = document.querySelector('#start-time-sleep') as HTMLInputElement\n  const timesDiv = document.querySelector('#times-wake-up') as HTMLDivElement\n  startTimeInput.value = dateToTimeString(new Date())\n\n  function onStartTimeChange(event: Event) {\n    const startTime = `${(<HTMLInputElement>event.target).value}`\n    timesDiv.innerText = ''\n\n    let oneSleepCycleLater: string\n    let newTime = startTime\n    let calc = new CalculateOneSleepCycleLaterService({ baseTime: newTime })\n    for (let index = 0; index < 5; index++) {\n      oneSleepCycleLater = calc.run()\n      newTime = oneSleepCycleLater\n      const li = document.createElement('li')\n      li.innerText = oneSleepCycleLater\n      timesDiv.appendChild(li)\n    }\n  }\n\n  startTimeInput.addEventListener('change', onStartTimeChange)\n}\n\nmain()\n\nfunction dateToTimeString(date: Date): string {\n  let hours = new String(date.getHours())\n  hours = hours.padStart(2, '0')\n  let minutes = new String(date.getMinutes())\n  minutes = minutes.padStart(2, '0')\n  return `${hours}:${minutes}`\n}\n\n"],"names":["$3dd853ceb74a3d5e$export$2e2bcd8739ae039","run","startDate","Date","this","DEFAULT_DATE","startTime","startTimeInMillisecs","operation","getTime","oneSleepCycleDurationInMinutes","MILLISECONDS_TO_MINUTES","formattedTime","toLocaleTimeString","replace","baseTime","super","mili1","mili2","startTimeInput","document","querySelector","timesDiv","value","date","hours","String","getHours","padStart","minutes","getMinutes","$5ba171b4a505aeb2$var$dateToTimeString","addEventListener","event","target","oneSleepCycleLater","innerText","newTime","calc","index","li","createElement","appendChild","$5ba171b4a505aeb2$var$main"],"version":3,"file":"index.0f22cecc.js.map"}